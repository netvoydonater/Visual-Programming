{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Visual-Programming\\\\dz8\\\\my-comments-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://jsonplaceholder.typicode.com/comments';\nfunction App() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [newComment, setNewComment] = useState({\n    name: '',\n    email: '',\n    body: ''\n  });\n  const [editingComment, setEditingComment] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) throw new Error('Failed to fetch');\n        const data = await response.json();\n        setComments(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleAddComment = async () => {\n    const tempId = Date.now();\n    const commentToAdd = {\n      ...newComment,\n      id: tempId,\n      postId: 1\n    };\n    setComments(prev => [...prev, commentToAdd]);\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        body: JSON.stringify(commentToAdd),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to add');\n      const data = await response.json();\n      setComments(prev => prev.map(c => c.id === tempId ? data : c));\n    } catch (err) {\n      setComments(prev => prev.filter(c => c.id !== tempId));\n      setError(err.message);\n    }\n    setNewComment({\n      name: '',\n      email: '',\n      body: ''\n    });\n  };\n  const handleDelete = async () => {\n    if (selectedRows.length === 0) return;\n    const idsToDelete = selectedRows;\n    setComments(prev => prev.filter(c => !idsToDelete.includes(c.id)));\n    try {\n      await Promise.all(idsToDelete.map(id => fetch(`${API_URL}/${id}`, {\n        method: 'DELETE'\n      })));\n    } catch (err) {\n      const response = await fetch(API_URL);\n      const data = await response.json();\n      setComments(data);\n      setError(err.message);\n    }\n    setSelectedRows([]);\n  };\n  const handleEditSave = async () => {\n    if (!editingComment) return;\n    const original = comments.find(c => c.id === editingComment.id);\n    setComments(prev => prev.map(c => c.id === editingComment.id ? editingComment : c));\n    try {\n      await fetch(`${API_URL}/${editingComment.id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(editingComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n    } catch (err) {\n      setComments(prev => prev.map(c => c.id === original.id ? original : c));\n      setError(err.message);\n    }\n    setEditingComment(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ioeD70RLZQlWSmhlqHuq+IIMR3U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DataSet","jsxDEV","_jsxDEV","API_URL","App","_s","comments","setComments","selectedRows","setSelectedRows","isLoading","setIsLoading","error","setError","newComment","setNewComment","name","email","body","editingComment","setEditingComment","fetchData","response","fetch","ok","Error","data","json","err","message","handleAddComment","tempId","Date","now","commentToAdd","id","postId","prev","method","JSON","stringify","headers","map","c","filter","handleDelete","length","idsToDelete","includes","Promise","all","handleEditSave","original","find","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Visual-Programming/dz8/my-comments-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DataSet from './DataSet';\r\nimport './App.css';\r\n\r\nconst API_URL = 'https://jsonplaceholder.typicode.com/comments';\r\n\r\nfunction App() {\r\n  const [comments, setComments] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [newComment, setNewComment] = useState({\r\n    name: '',\r\n    email: '',\r\n    body: ''\r\n  });\r\n  const [editingComment, setEditingComment] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(API_URL);\r\n        if (!response.ok) throw new Error('Failed to fetch');\r\n        const data = await response.json();\r\n        setComments(data);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleAddComment = async () => {\r\n    const tempId = Date.now();\r\n    const commentToAdd = {\r\n      ...newComment,\r\n      id: tempId,\r\n      postId: 1\r\n    };\r\n\r\n    setComments(prev => [...prev, commentToAdd]);\r\n    \r\n    try {\r\n      const response = await fetch(API_URL, {\r\n        method: 'POST',\r\n        body: JSON.stringify(commentToAdd),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to add');\r\n      \r\n      const data = await response.json();\r\n      setComments(prev => \r\n        prev.map(c => c.id === tempId ? data : c)\r\n      );\r\n    } catch (err) {\r\n      setComments(prev => prev.filter(c => c.id !== tempId));\r\n      setError(err.message);\r\n    }\r\n    \r\n    setNewComment({ name: '', email: '', body: '' });\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (selectedRows.length === 0) return;\r\n    \r\n    const idsToDelete = selectedRows;\r\n    setComments(prev => prev.filter(c => !idsToDelete.includes(c.id)));\r\n    \r\n    try {\r\n      await Promise.all(\r\n        idsToDelete.map(id => \r\n          fetch(`${API_URL}/${id}`, { method: 'DELETE' })\r\n        )\r\n      );\r\n    } catch (err) {\r\n      const response = await fetch(API_URL);\r\n      const data = await response.json();\r\n      setComments(data);\r\n      setError(err.message);\r\n    }\r\n    \r\n    setSelectedRows([]);\r\n  };\r\n\r\n  const handleEditSave = async () => {\r\n    if (!editingComment) return;\r\n    \r\n    const original = comments.find(c => c.id === editingComment.id);\r\n    setComments(prev => \r\n      prev.map(c => c.id === editingComment.id ? editingComment : c)\r\n    );\r\n    \r\n    try {\r\n      await fetch(`${API_URL}/${editingComment.id}`, {\r\n        method: 'PATCH',\r\n        body: JSON.stringify(editingComment),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n      });\r\n    } catch (err) {\r\n      setComments(prev => \r\n        prev.map(c => c.id === original.id ? original : c)\r\n      );\r\n      setError(err.message);\r\n    }\r\n    \r\n    setEditingComment(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/* ... остальной JSX ... */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}