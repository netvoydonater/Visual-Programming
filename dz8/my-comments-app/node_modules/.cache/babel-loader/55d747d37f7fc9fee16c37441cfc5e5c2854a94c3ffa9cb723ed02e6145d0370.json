{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Visual-Programming\\\\dz8\\\\my-comments-app\\\\src\\\\PostPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport AddForm from './AddForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsPage = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedRows, setSelectedRows] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=20');\n        if (!response.ok) throw new Error('Failed to fetch posts');\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleAddPost = async newPost => {\n    const tempId = Date.now();\n    try {\n      const optimisticPost = {\n        ...newPost,\n        id: tempId,\n        userId: 1\n      };\n      setData(prev => [...prev, optimisticPost]);\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...newPost,\n          userId: 1\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to add post');\n      const serverPost = await response.json();\n      setData(prev => prev.map(p => p.id === tempId ? serverPost : p));\n    } catch (err) {\n      setError(err.message);\n      setData(prev => prev.filter(p => p.id !== tempId));\n    }\n  };\n  const handleDeletePosts = async () => {\n    if (selectedRows.length === 0 || !window.confirm('Delete selected posts?')) return;\n    const idsToDelete = selectedRows.map(index => data[index].id);\n    const originalData = [...data];\n    try {\n      setData(prev => prev.filter((_, index) => !selectedRows.includes(index)));\n      setSelectedRows([]);\n      const deletePromises = idsToDelete.map(id => fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n        method: 'DELETE'\n      }));\n      await Promise.all(deletePromises);\n    } catch (err) {\n      setError(err.message);\n      setData(originalData);\n    }\n  };\n  const handleUpdatePost = async updatedPost => {\n    const originalData = [...data];\n    try {\n      setData(prev => prev.map(post => post.id === updatedPost.id ? updatedPost : post));\n      const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${updatedPost.id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updatedPost),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to update post');\n    } catch (err) {\n      setError(err.message);\n      setData(originalData);\n    }\n  };\n  const handleRowSelection = (rowIndex, event) => {\n    const isCtrlPressed = event.ctrlKey || event.metaKey;\n    if (isCtrlPressed) {\n      setSelectedRows(prev => prev.includes(rowIndex) ? prev.filter(index => index !== rowIndex) : [...prev, rowIndex]);\n    } else {\n      setSelectedRows(prev => prev.includes(rowIndex) ? [] : [rowIndex]);\n    }\n  };\n  const headers = [{\n    key: 'id',\n    label: 'ID'\n  }, {\n    key: 'title',\n    label: 'Title'\n  }, {\n    key: 'body',\n    label: 'Body'\n  }, {\n    key: 'userId',\n    label: 'User ID'\n  }];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading posts...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddForm, {\n      onSubmit: handleAddPost,\n      fields: [{\n        name: 'title',\n        label: 'Title',\n        type: 'text',\n        required: true\n      }, {\n        name: 'body',\n        label: 'Body',\n        type: 'textarea',\n        required: true\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeletePosts,\n        disabled: selectedRows.length === 0,\n        className: \"delete-btn\",\n        children: [\"Delete Selected (\", selectedRows.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      headers: headers,\n      data: data,\n      selectedRows: selectedRows,\n      onRowEdit: handleUpdatePost,\n      onRowSelection: handleRowSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsPage, \"zzUCaqd4C7n09QPC1cwwUbOThj4=\");\n_c = PostsPage;\nexport default PostsPage;\nvar _c;\n$RefreshReg$(_c, \"PostsPage\");","map":{"version":3,"names":["React","useState","useEffect","DataSet","AddForm","jsxDEV","_jsxDEV","PostsPage","_s","data","setData","loading","setLoading","error","setError","selectedRows","setSelectedRows","fetchData","response","fetch","ok","Error","result","json","err","message","handleAddPost","newPost","tempId","Date","now","optimisticPost","id","userId","prev","method","body","JSON","stringify","headers","serverPost","map","p","filter","handleDeletePosts","length","window","confirm","idsToDelete","index","originalData","_","includes","deletePromises","Promise","all","handleUpdatePost","updatedPost","post","handleRowSelection","rowIndex","event","isCtrlPressed","ctrlKey","metaKey","key","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","fields","name","type","required","onClick","disabled","onRowEdit","onRowSelection","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Visual-Programming/dz8/my-comments-app/src/PostPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DataSet from './DataSet';\r\nimport AddForm from './AddForm';\r\n\r\nconst PostsPage = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => { \r\n      try {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=20');\r\n        if (!response.ok) throw new Error('Failed to fetch posts');\r\n        const result = await response.json();\r\n        setData(result);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleAddPost = async (newPost) => {\r\n    const tempId = Date.now();\r\n    try {\r\n      const optimisticPost = { ...newPost, id: tempId, userId: 1 };\r\n      setData(prev => [...prev, optimisticPost]);\r\n      \r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ ...newPost, userId: 1 }),\r\n        headers: { 'Content-type': 'application/json; charset=UTF-8' },\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to add post');\r\n      const serverPost = await response.json();\r\n      setData(prev => prev.map(p => p.id === tempId ? serverPost : p));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setData(prev => prev.filter(p => p.id !== tempId));\r\n    }\r\n  };\r\n\r\n  const handleDeletePosts = async () => {\r\n    if (selectedRows.length === 0 || !window.confirm('Delete selected posts?')) return;\r\n    const idsToDelete = selectedRows.map(index => data[index].id);\r\n    const originalData = [...data];\r\n    \r\n    try {\r\n      setData(prev => prev.filter((_, index) => !selectedRows.includes(index)));\r\n      setSelectedRows([]);\r\n      \r\n      const deletePromises = idsToDelete.map(id =>\r\n        fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, { method: 'DELETE' })\r\n      );\r\n      await Promise.all(deletePromises);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setData(originalData);\r\n    }\r\n  };\r\n\r\n  const handleUpdatePost = async (updatedPost) => {\r\n    const originalData = [...data];\r\n    try {\r\n      setData(prev => prev.map(post => post.id === updatedPost.id ? updatedPost : post));\r\n      \r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/posts/${updatedPost.id}`,\r\n        {\r\n          method: 'PATCH',\r\n          body: JSON.stringify(updatedPost),\r\n          headers: { 'Content-type': 'application/json; charset=UTF-8' },\r\n        }\r\n      );\r\n      if (!response.ok) throw new Error('Failed to update post');\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setData(originalData);\r\n    }\r\n  };\r\n\r\n  const handleRowSelection = (rowIndex, event) => {\r\n    const isCtrlPressed = event.ctrlKey || event.metaKey;\r\n    if (isCtrlPressed) {\r\n      setSelectedRows(prev =>\r\n        prev.includes(rowIndex)\r\n          ? prev.filter(index => index !== rowIndex)\r\n          : [...prev, rowIndex]\r\n      );\r\n    } else {\r\n      setSelectedRows(prev => (prev.includes(rowIndex) ? [] : [rowIndex]));\r\n    }\r\n  };\r\n\r\n  const headers = [\r\n    { key: 'id', label: 'ID' },\r\n    { key: 'title', label: 'Title' },\r\n    { key: 'body', label: 'Body' },\r\n    { key: 'userId', label: 'User ID' },\r\n  ];\r\n\r\n  if (loading) return <div className=\"loading\">Loading posts...</div>;\r\n  if (error) return <div className=\"error\">Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <h1>Posts Management</h1>\r\n      \r\n      <AddForm \r\n        onSubmit={handleAddPost} \r\n        fields={[\r\n          { name: 'title', label: 'Title', type: 'text', required: true },\r\n          { name: 'body', label: 'Body', type: 'textarea', required: true }\r\n        ]}\r\n      />\r\n      \r\n      <div className=\"actions\">\r\n        <button\r\n          onClick={handleDeletePosts}\r\n          disabled={selectedRows.length === 0}\r\n          className=\"delete-btn\"\r\n        >\r\n          Delete Selected ({selectedRows.length})\r\n        </button>\r\n      </div>\r\n      \r\n      <DataSet\r\n        headers={headers}\r\n        data={data}\r\n        selectedRows={selectedRows}\r\n        onRowEdit={handleUpdatePost}\r\n        onRowSelection={handleRowSelection}\r\n      />\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}