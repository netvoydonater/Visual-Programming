{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Visual-Programming\\\\dz8\\\\my-comments-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [newComment, setNewComment] = useState({\n    name: '',\n    email: '',\n    body: ''\n  });\n  const [selectedRows, setSelectedRows] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=20');\n        if (!response.ok) throw new Error('Failed to fetch comments');\n        const data = await response.json();\n        setComments(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleAddComment = async () => {\n    const tempId = Date.now();\n    try {\n      const optimisticComment = {\n        ...newComment,\n        id: tempId,\n        postId: 1\n      };\n      setComments(prev => [...prev, optimisticComment]);\n      setNewComment({\n        name: '',\n        email: '',\n        body: ''\n      });\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...newComment,\n          postId: 1\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to add comment');\n      const serverComment = await response.json();\n      setComments(prev => prev.map(c => c.id === tempId ? serverComment : c));\n    } catch (err) {\n      setError(err.message);\n      setComments(prev => prev.filter(c => c.id !== tempId));\n    }\n  };\n  const handleDeleteComments = async () => {\n    if (selectedRows.length === 0 || !window.confirm('Удалить выбранные комментарии?')) return;\n    const idsToDelete = selectedRows.map(index => comments[index].id);\n    const originalComments = [...comments];\n    try {\n      // Оптимистичное удаление\n      setComments(prev => prev.filter((_, index) => !selectedRows.includes(index)));\n      setSelectedRows([]);\n      const deletePromises = idsToDelete.map(id => fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'DELETE'\n      }));\n      await Promise.all(deletePromises);\n    } catch (err) {\n      setError(err.message);\n      setComments(originalComments);\n    }\n  };\n  const handleUpdateComment = async updatedComment => {\n    const originalComments = [...comments];\n    try {\n      setComments(prev => prev.map(comment => comment.id === updatedComment.id ? updatedComment : comment));\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${updatedComment.id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updatedComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to update comment');\n    } catch (err) {\n      setError(err.message);\n      setComments(originalComments);\n    }\n  };\n  const handleRowSelection = (rowIndex, event) => {\n    const isCtrlPressed = event.ctrlKey || event.metaKey;\n    if (isCtrlPressed) {\n      setSelectedRows(prev => prev.includes(rowIndex) ? prev.filter(index => index !== rowIndex) : [...prev, rowIndex]);\n    } else {\n      setSelectedRows(prev => prev.includes(rowIndex) ? [] : [rowIndex]);\n    }\n  };\n  const headers = [{\n    key: 'id',\n    label: 'ID'\n  }, {\n    key: 'name',\n    label: 'Name'\n  }, {\n    key: 'email',\n    label: 'Email'\n  }, {\n    key: 'body',\n    label: 'Comment'\n  }];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading comments...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\",\n          value: newComment.name,\n          onChange: e => setNewComment({\n            ...newComment,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: newComment.email,\n          onChange: e => setNewComment({\n            ...newComment,\n            email: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Comment text\",\n          value: newComment.body,\n          onChange: e => setNewComment({\n            ...newComment,\n            body: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteComments,\n        disabled: selectedRows.length === 0,\n        className: \"delete-btn\",\n        children: [\"Delete Selected (\", selectedRows.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      headers: headers,\n      data: comments,\n      selectedRows: selectedRows,\n      onRowEdit: handleUpdateComment,\n      onRowSelection: handleRowSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AZV9mFATpR79P5cMZEI+3Ka73jc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DataSet","jsxDEV","_jsxDEV","App","_s","comments","setComments","loading","setLoading","error","setError","newComment","setNewComment","name","email","body","selectedRows","setSelectedRows","fetchData","response","fetch","ok","Error","data","json","err","message","handleAddComment","tempId","Date","now","optimisticComment","id","postId","prev","method","JSON","stringify","headers","serverComment","map","c","filter","handleDeleteComments","length","window","confirm","idsToDelete","index","originalComments","_","includes","deletePromises","Promise","all","handleUpdateComment","updatedComment","comment","handleRowSelection","rowIndex","event","isCtrlPressed","ctrlKey","metaKey","key","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","disabled","onRowEdit","onRowSelection","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Visual-Programming/dz8/my-comments-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DataSet from './DataSet';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [comments, setComments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [newComment, setNewComment] = useState({\r\n    name: '',\r\n    email: '',\r\n    body: '',\r\n  });\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=20');\r\n        if (!response.ok) throw new Error('Failed to fetch comments');\r\n        const data = await response.json();\r\n        setComments(data);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleAddComment = async () => {\r\n    const tempId = Date.now();\r\n    try {\r\n      const optimisticComment = {\r\n        ...newComment,\r\n        id: tempId,\r\n        postId: 1\r\n      };\r\n      \r\n      setComments(prev => [...prev, optimisticComment]);\r\n      setNewComment({ name: '', email: '', body: '' });\r\n\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          ...newComment,\r\n          postId: 1\r\n        }),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to add comment');\r\n      \r\n      const serverComment = await response.json();\r\n      setComments(prev => prev.map(c => c.id === tempId ? serverComment : c));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setComments(prev => prev.filter(c => c.id !== tempId));\r\n    }\r\n  };\r\n\r\n  const handleDeleteComments = async () => {\r\n    if (selectedRows.length === 0 || !window.confirm('Удалить выбранные комментарии?')) return;\r\n\r\n    const idsToDelete = selectedRows.map(index => comments[index].id);\r\n    const originalComments = [...comments];\r\n    \r\n    try {\r\n      // Оптимистичное удаление\r\n      setComments(prev => prev.filter((_, index) => !selectedRows.includes(index)));\r\n      setSelectedRows([]);\r\n\r\n      const deletePromises = idsToDelete.map(id => \r\n        fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\r\n          method: 'DELETE',\r\n        })\r\n      );\r\n\r\n      await Promise.all(deletePromises);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setComments(originalComments);\r\n    }\r\n  };\r\n\r\n  const handleUpdateComment = async (updatedComment) => {\r\n    const originalComments = [...comments];\r\n    try {\r\n      setComments(prev => \r\n        prev.map(comment => \r\n          comment.id === updatedComment.id ? updatedComment : comment\r\n        )\r\n      );\r\n\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/comments/${updatedComment.id}`,\r\n        {\r\n          method: 'PATCH',\r\n          body: JSON.stringify(updatedComment),\r\n          headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.ok) throw new Error('Failed to update comment');\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setComments(originalComments);\r\n    }\r\n  };\r\n\r\n  const handleRowSelection = (rowIndex, event) => {\r\n    const isCtrlPressed = event.ctrlKey || event.metaKey;\r\n\r\n    if (isCtrlPressed) {\r\n      setSelectedRows(prev =>\r\n        prev.includes(rowIndex)\r\n          ? prev.filter(index => index !== rowIndex)\r\n          : [...prev, rowIndex]\r\n      );\r\n    } else {\r\n      setSelectedRows(prev =>\r\n        prev.includes(rowIndex) ? [] : [rowIndex]\r\n      );\r\n    }\r\n  };\r\n\r\n  const headers = [\r\n    { key: 'id', label: 'ID' },\r\n    { key: 'name', label: 'Name' },\r\n    { key: 'email', label: 'Email' },\r\n    { key: 'body', label: 'Comment' },\r\n  ];\r\n\r\n  if (loading) return <div className=\"loading\">Loading comments...</div>;\r\n  if (error) return <div className=\"error\">Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Comments Management</h1>\r\n      \r\n      <div className=\"add-comment\">\r\n        <h2>Add New Comment</h2>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            value={newComment.name}\r\n            onChange={(e) => setNewComment({...newComment, name: e.target.value})}\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={newComment.email}\r\n            onChange={(e) => setNewComment({...newComment, email: e.target.value})}\r\n          />\r\n          <textarea\r\n            placeholder=\"Comment text\"\r\n            value={newComment.body}\r\n            onChange={(e) => setNewComment({...newComment, body: e.target.value})}\r\n          />\r\n          <button onClick={handleAddComment}>Add Comment</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"actions\">\r\n        <button \r\n          onClick={handleDeleteComments}\r\n          disabled={selectedRows.length === 0}\r\n          className=\"delete-btn\"\r\n        >\r\n          Delete Selected ({selectedRows.length})\r\n        </button>\r\n      </div>\r\n\r\n      <DataSet\r\n        headers={headers}\r\n        data={comments}\r\n        selectedRows={selectedRows}\r\n        onRowEdit={handleUpdateComment}\r\n        onRowSelection={handleRowSelection}\r\n      />\r\n\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC;IAC3Ce,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yDAAyD,CAAC;QACvF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC7D,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClClB,WAAW,CAACiB,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRlB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDU,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACzB,IAAI;MACF,MAAMC,iBAAiB,GAAG;QACxB,GAAGpB,UAAU;QACbqB,EAAE,EAAEJ,MAAM;QACVK,MAAM,EAAE;MACV,CAAC;MAED3B,WAAW,CAAC4B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEH,iBAAiB,CAAC,CAAC;MACjDnB,aAAa,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG,CAAC,CAAC;MAEhD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC5Ee,MAAM,EAAE,MAAM;QACdpB,IAAI,EAAEqB,IAAI,CAACC,SAAS,CAAC;UACnB,GAAG1B,UAAU;UACbsB,MAAM,EAAE;QACV,CAAC,CAAC;QACFK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAE1D,MAAMiB,aAAa,GAAG,MAAMpB,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC3ClB,WAAW,CAAC4B,IAAI,IAAIA,IAAI,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACT,EAAE,KAAKJ,MAAM,GAAGW,aAAa,GAAGE,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC,OAAOhB,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACrBpB,WAAW,CAAC4B,IAAI,IAAIA,IAAI,CAACQ,MAAM,CAACD,CAAC,IAAIA,CAAC,CAACT,EAAE,KAAKJ,MAAM,CAAC,CAAC;IACxD;EACF,CAAC;EAED,MAAMe,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI3B,YAAY,CAAC4B,MAAM,KAAK,CAAC,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,gCAAgC,CAAC,EAAE;IAEpF,MAAMC,WAAW,GAAG/B,YAAY,CAACwB,GAAG,CAACQ,KAAK,IAAI3C,QAAQ,CAAC2C,KAAK,CAAC,CAAChB,EAAE,CAAC;IACjE,MAAMiB,gBAAgB,GAAG,CAAC,GAAG5C,QAAQ,CAAC;IAEtC,IAAI;MACF;MACAC,WAAW,CAAC4B,IAAI,IAAIA,IAAI,CAACQ,MAAM,CAAC,CAACQ,CAAC,EAAEF,KAAK,KAAK,CAAChC,YAAY,CAACmC,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC;MAC7E/B,eAAe,CAAC,EAAE,CAAC;MAEnB,MAAMmC,cAAc,GAAGL,WAAW,CAACP,GAAG,CAACR,EAAE,IACvCZ,KAAK,CAAC,iDAAiDY,EAAE,EAAE,EAAE;QAC3DG,MAAM,EAAE;MACV,CAAC,CACH,CAAC;MAED,MAAMkB,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;IACnC,CAAC,CAAC,OAAO3B,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACrBpB,WAAW,CAAC2C,gBAAgB,CAAC;IAC/B;EACF,CAAC;EAED,MAAMM,mBAAmB,GAAG,MAAOC,cAAc,IAAK;IACpD,MAAMP,gBAAgB,GAAG,CAAC,GAAG5C,QAAQ,CAAC;IACtC,IAAI;MACFC,WAAW,CAAC4B,IAAI,IACdA,IAAI,CAACM,GAAG,CAACiB,OAAO,IACdA,OAAO,CAACzB,EAAE,KAAKwB,cAAc,CAACxB,EAAE,GAAGwB,cAAc,GAAGC,OACtD,CACF,CAAC;MAED,MAAMtC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iDAAiDoC,cAAc,CAACxB,EAAE,EAAE,EACpE;QACEG,MAAM,EAAE,OAAO;QACfpB,IAAI,EAAEqB,IAAI,CAACC,SAAS,CAACmB,cAAc,CAAC;QACpClB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC/D,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACrBpB,WAAW,CAAC2C,gBAAgB,CAAC;IAC/B;EACF,CAAC;EAED,MAAMS,kBAAkB,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;IAC9C,MAAMC,aAAa,GAAGD,KAAK,CAACE,OAAO,IAAIF,KAAK,CAACG,OAAO;IAEpD,IAAIF,aAAa,EAAE;MACjB5C,eAAe,CAACiB,IAAI,IAClBA,IAAI,CAACiB,QAAQ,CAACQ,QAAQ,CAAC,GACnBzB,IAAI,CAACQ,MAAM,CAACM,KAAK,IAAIA,KAAK,KAAKW,QAAQ,CAAC,GACxC,CAAC,GAAGzB,IAAI,EAAEyB,QAAQ,CACxB,CAAC;IACH,CAAC,MAAM;MACL1C,eAAe,CAACiB,IAAI,IAClBA,IAAI,CAACiB,QAAQ,CAACQ,QAAQ,CAAC,GAAG,EAAE,GAAG,CAACA,QAAQ,CAC1C,CAAC;IACH;EACF,CAAC;EAED,MAAMrB,OAAO,GAAG,CACd;IAAE0B,GAAG,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,EAC1B;IAAED,GAAG,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAO,CAAC,EAC9B;IAAED,GAAG,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAQ,CAAC,EAChC;IAAED,GAAG,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAU,CAAC,CAClC;EAED,IAAI1D,OAAO,EAAE,oBAAOL,OAAA;IAAKgE,SAAS,EAAC,SAAS;IAAAC,QAAA,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACtE,IAAI9D,KAAK,EAAE,oBAAOP,OAAA;IAAKgE,SAAS,EAAC,OAAO;IAAAC,QAAA,GAAC,SAAO,EAAC1D,KAAK;EAAA;IAAA2D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE7D,oBACErE,OAAA;IAAKgE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjE,OAAA;MAAAiE,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE5BrE,OAAA;MAAKgE,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BjE,OAAA;QAAAiE,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBrE,OAAA;QAAKgE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBjE,OAAA;UACEsE,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,MAAM;UAClBC,KAAK,EAAE/D,UAAU,CAACE,IAAK;UACvB8D,QAAQ,EAAGC,CAAC,IAAKhE,aAAa,CAAC;YAAC,GAAGD,UAAU;YAAEE,IAAI,EAAE+D,CAAC,CAACC,MAAM,CAACH;UAAK,CAAC;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE,CAAC,eACFrE,OAAA;UACEsE,IAAI,EAAC,OAAO;UACZC,WAAW,EAAC,OAAO;UACnBC,KAAK,EAAE/D,UAAU,CAACG,KAAM;UACxB6D,QAAQ,EAAGC,CAAC,IAAKhE,aAAa,CAAC;YAAC,GAAGD,UAAU;YAAEG,KAAK,EAAE8D,CAAC,CAACC,MAAM,CAACH;UAAK,CAAC;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxE,CAAC,eACFrE,OAAA;UACEuE,WAAW,EAAC,cAAc;UAC1BC,KAAK,EAAE/D,UAAU,CAACI,IAAK;UACvB4D,QAAQ,EAAGC,CAAC,IAAKhE,aAAa,CAAC;YAAC,GAAGD,UAAU;YAAEI,IAAI,EAAE6D,CAAC,CAACC,MAAM,CAACH;UAAK,CAAC;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE,CAAC,eACFrE,OAAA;UAAQ4E,OAAO,EAAEnD,gBAAiB;UAAAwC,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENrE,OAAA;MAAKgE,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBjE,OAAA;QACE4E,OAAO,EAAEnC,oBAAqB;QAC9BoC,QAAQ,EAAE/D,YAAY,CAAC4B,MAAM,KAAK,CAAE;QACpCsB,SAAS,EAAC,YAAY;QAAAC,QAAA,GACvB,mBACkB,EAACnD,YAAY,CAAC4B,MAAM,EAAC,GACxC;MAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENrE,OAAA,CAACF,OAAO;MACNsC,OAAO,EAAEA,OAAQ;MACjBf,IAAI,EAAElB,QAAS;MACfW,YAAY,EAAEA,YAAa;MAC3BgE,SAAS,EAAEzB,mBAAoB;MAC/B0B,cAAc,EAAEvB;IAAmB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,EAED9D,KAAK,iBAAIP,OAAA;MAAKgE,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAE1D;IAAK;MAAA2D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV;AAACnE,EAAA,CA3LQD,GAAG;AAAA+E,EAAA,GAAH/E,GAAG;AA6LZ,eAAeA,GAAG;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}