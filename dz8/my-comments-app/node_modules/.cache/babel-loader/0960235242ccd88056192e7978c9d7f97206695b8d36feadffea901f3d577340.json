{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Visual-Programming\\\\dz7\\\\table\\\\src\\\\DataSet.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './DataSet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataSet = ({\n  headers = [],\n  data = [],\n  renderHeader = header => header.label || header.key,\n  renderCell = value => value\n}) => {\n  _s();\n  const [selectedRows, setSelectedRows] = useState([]);\n  const computedHeaders = headers.length > 0 ? headers : data.length > 0 ? Object.keys(data[0]).map(key => ({\n    key,\n    label: key\n  })) : [];\n  const handleRowSelection = (rowIndex, event) => {\n    const isCtrlPressed = event.ctrlKey || event.metaKey;\n    if (isCtrlPressed) {\n      setSelectedRows(prev => prev.includes(rowIndex) ? prev.filter(index => index !== rowIndex) : [...prev, rowIndex]);\n    } else {\n      setSelectedRows(prev => prev.includes(rowIndex) ? [] : [rowIndex]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"dataset-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"selection-column\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), computedHeaders.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: renderHeader(header)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: selectedRows.includes(rowIndex) ? 'selected' : '',\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"selection-column\",\n          onClick: event => handleRowSelection(rowIndex, event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), computedHeaders.map((header, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: renderCell(row[header.key], row, header.key)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(DataSet, \"kE+zebKPJPLpKtm4LqE61mD+8P8=\");\n_c = DataSet;\nexport default DataSet;\nvar _c;\n$RefreshReg$(_c, \"DataSet\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DataSet","headers","data","renderHeader","header","label","key","renderCell","value","_s","selectedRows","setSelectedRows","computedHeaders","length","Object","keys","map","handleRowSelection","rowIndex","event","isCtrlPressed","ctrlKey","metaKey","prev","includes","filter","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","row","onClick","colIndex","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Visual-Programming/dz7/table/src/DataSet.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './DataSet.css';\r\n\r\nconst DataSet = ({\r\n  headers = [],\r\n  data = [],\r\n  renderHeader = (header) => header.label || header.key,\r\n  renderCell = (value) => value,\r\n}) => {\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  const computedHeaders = headers.length > 0\r\n    ? headers\r\n    : data.length > 0\r\n      ? Object.keys(data[0]).map((key) => ({ key, label: key }))\r\n      : [];\r\n\r\n  const handleRowSelection = (rowIndex, event) => {\r\n    const isCtrlPressed = event.ctrlKey || event.metaKey; \r\n\r\n    if (isCtrlPressed) {\r\n      setSelectedRows((prev) =>\r\n        prev.includes(rowIndex)\r\n          ? prev.filter((index) => index !== rowIndex) \r\n          : [...prev, rowIndex] \r\n      );\r\n    } else {\r\n      setSelectedRows((prev) =>\r\n        prev.includes(rowIndex) ? [] : [rowIndex]\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <table className=\"dataset-table\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"selection-column\"></th>\r\n          {computedHeaders.map((header, index) => (\r\n            <th key={index}>{renderHeader(header)}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((row, rowIndex) => (\r\n          <tr\r\n            key={rowIndex}\r\n            className={selectedRows.includes(rowIndex) ? 'selected' : ''}\r\n          >\r\n            <td\r\n              className=\"selection-column\"\r\n              onClick={(event) => handleRowSelection(rowIndex, event)}\r\n            >\r\n            </td>\r\n            {computedHeaders.map((header, colIndex) => (\r\n              <td key={colIndex}>\r\n                {renderCell(row[header.key], row, header.key)}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default DataSet;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}