{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Visual-Programming\\\\dz8\\\\my-comments-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DataSet from './DataSet';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [newComment, setNewComment] = useState({\n    name: '',\n    email: '',\n    body: ''\n  });\n  const [selectedRows, setSelectedRows] = useState([]); // Добавлено состояние для выбранных строк\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n        if (!response.ok) throw new Error('Failed to fetch');\n        const data = await response.json();\n        setComments(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleAddComment = async () => {\n    const tempId = Date.now(); // Перемещено внутрь функции\n    try {\n      // Оптимистичное обновление\n      const optimisticComment = {\n        ...newComment,\n        id: tempId\n      };\n      setComments(prev => [...prev, optimisticComment]);\n      setNewComment({\n        name: '',\n        email: '',\n        body: ''\n      });\n\n      // Отправка на сервер\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\n        method: 'POST',\n        body: JSON.stringify(newComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to add comment');\n      const serverComment = await response.json();\n      // Заменяем временный ID на серверный\n      setComments(prev => prev.map(c => c.id === tempId ? serverComment : c));\n    } catch (err) {\n      setError(err.message);\n      // Откатываем изменения при ошибке\n      setComments(prev => prev.filter(c => c.id !== tempId));\n    }\n  };\n  const handleDeleteComments = async () => {\n    if (selectedRows.length === 0) return;\n    try {\n      // Получаем ID комментариев для удаления\n      const idsToDelete = selectedRows.map(index => comments[index].id);\n\n      // Оптимистичное обновление - удаляем сразу из состояния\n      setComments(prev => prev.filter((_, index) => !selectedRows.includes(index)));\n      setSelectedRows([]); // Сбрасываем выделение\n\n      // Отправляем запросы на сервер\n      const deletePromises = idsToDelete.map(id => fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\n        method: 'DELETE'\n      }));\n      const responses = await Promise.all(deletePromises);\n\n      // Проверяем все ответы\n      if (responses.some(response => !response.ok)) {\n        throw new Error('Some deletions failed');\n      }\n    } catch (error) {\n      setError(error.message);\n      // Восстанавливаем данные при ошибке\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=20');\n      const freshData = await response.json();\n      setComments(freshData);\n    }\n  };\n  const handleUpdateComment = async updatedComment => {\n    try {\n      // Оптимистичное обновление\n      setComments(prev => prev.map(comment => comment.id === updatedComment.id ? updatedComment : comment));\n\n      // Отправка на сервер\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments/${updatedComment.id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(updatedComment),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to update comment');\n    } catch (err) {\n      setError(err.message);\n      // Восстанавливаем данные при ошибке\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments');\n      const data = await response.json();\n      setComments(data);\n    }\n  };\n  const handleRowSelection = (rowIndex, event) => {\n    const isCtrlPressed = event.ctrlKey || event.metaKey;\n    if (isCtrlPressed) {\n      setSelectedRows(prev => prev.includes(rowIndex) ? prev.filter(index => index !== rowIndex) : [...prev, rowIndex]);\n    } else {\n      setSelectedRows(prev => prev.includes(rowIndex) ? [] : [rowIndex]);\n    }\n  };\n  const headers = [{\n    key: 'id',\n    label: 'ID'\n  }, {\n    key: 'name',\n    label: 'Name'\n  }, {\n    key: 'email',\n    label: 'Email'\n  }, {\n    key: 'body',\n    label: 'Body'\n  }];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\",\n          value: newComment.name,\n          onChange: e => setNewComment({\n            ...newComment,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: newComment.email,\n          onChange: e => setNewComment({\n            ...newComment,\n            email: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Body\",\n          value: newComment.body,\n          onChange: e => setNewComment({\n            ...newComment,\n            body: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteComments,\n        disabled: selectedRows.length === 0,\n        children: \"Delete Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataSet, {\n      headers: headers,\n      data: comments,\n      onRowEdit: handleUpdateComment,\n      onRowSelection: handleRowSelection // Передаем обработчик выбора строк\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AZV9mFATpR79P5cMZEI+3Ka73jc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DataSet","jsxDEV","_jsxDEV","App","_s","comments","setComments","loading","setLoading","error","setError","newComment","setNewComment","name","email","body","selectedRows","setSelectedRows","fetchData","response","fetch","ok","Error","data","json","err","message","handleAddComment","tempId","Date","now","optimisticComment","id","prev","method","JSON","stringify","headers","serverComment","map","c","filter","handleDeleteComments","length","idsToDelete","index","_","includes","deletePromises","responses","Promise","all","some","freshData","handleUpdateComment","updatedComment","comment","handleRowSelection","rowIndex","event","isCtrlPressed","ctrlKey","metaKey","key","label","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","onClick","disabled","onRowEdit","onRowSelection","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Visual-Programming/dz8/my-comments-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DataSet from './DataSet';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [comments, setComments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [newComment, setNewComment] = useState({\r\n    name: '',\r\n    email: '',\r\n    body: '',\r\n  });\r\n  const [selectedRows, setSelectedRows] = useState([]); // Добавлено состояние для выбранных строк\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/comments');\r\n        if (!response.ok) throw new Error('Failed to fetch');\r\n        const data = await response.json();\r\n        setComments(data);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleAddComment = async () => {\r\n    const tempId = Date.now(); // Перемещено внутрь функции\r\n    try {\r\n      // Оптимистичное обновление\r\n      const optimisticComment = { ...newComment, id: tempId };\r\n      setComments(prev => [...prev, optimisticComment]);\r\n      setNewComment({ name: '', email: '', body: '' });\r\n\r\n      // Отправка на сервер\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to add comment');\r\n\r\n      const serverComment = await response.json();\r\n      // Заменяем временный ID на серверный\r\n      setComments(prev => prev.map(c => c.id === tempId ? serverComment : c));\r\n    } catch (err) {\r\n      setError(err.message);\r\n      // Откатываем изменения при ошибке\r\n      setComments(prev => prev.filter(c => c.id !== tempId));\r\n    }\r\n  };\r\n\r\n  const handleDeleteComments = async () => {\r\n    if (selectedRows.length === 0) return;\r\n  \r\n    try {\r\n      // Получаем ID комментариев для удаления\r\n      const idsToDelete = selectedRows.map(index => comments[index].id);\r\n      \r\n      // Оптимистичное обновление - удаляем сразу из состояния\r\n      setComments(prev => prev.filter((_, index) => !selectedRows.includes(index)));\r\n      setSelectedRows([]); // Сбрасываем выделение\r\n  \r\n      // Отправляем запросы на сервер\r\n      const deletePromises = idsToDelete.map(id => \r\n        fetch(`https://jsonplaceholder.typicode.com/comments/${id}`, {\r\n          method: 'DELETE'\r\n        })\r\n      );\r\n  \r\n      const responses = await Promise.all(deletePromises);\r\n      \r\n      // Проверяем все ответы\r\n      if (responses.some(response => !response.ok)) {\r\n        throw new Error('Some deletions failed');\r\n      }\r\n  \r\n    } catch (error) {\r\n      setError(error.message);\r\n      // Восстанавливаем данные при ошибке\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments?_limit=20');\r\n      const freshData = await response.json();\r\n      setComments(freshData);\r\n    }\r\n  };\r\n\r\n  const handleUpdateComment = async (updatedComment) => {\r\n    try {\r\n      // Оптимистичное обновление\r\n      setComments(prev => \r\n        prev.map(comment => \r\n          comment.id === updatedComment.id ? updatedComment : comment\r\n        )\r\n      );\r\n\r\n      // Отправка на сервер\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/comments/${updatedComment.id}`,\r\n        {\r\n          method: 'PATCH',\r\n          body: JSON.stringify(updatedComment),\r\n          headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!response.ok) throw new Error('Failed to update comment');\r\n    } catch (err) {\r\n      setError(err.message);\r\n      // Восстанавливаем данные при ошибке\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/comments');\r\n      const data = await response.json();\r\n      setComments(data);\r\n    }\r\n  };\r\n\r\n  const handleRowSelection = (rowIndex, event) => {\r\n    const isCtrlPressed = event.ctrlKey || event.metaKey;\r\n\r\n    if (isCtrlPressed) {\r\n      setSelectedRows((prev) =>\r\n        prev.includes(rowIndex)\r\n          ? prev.filter((index) => index !== rowIndex)\r\n          : [...prev, rowIndex]\r\n      );\r\n    } else {\r\n      setSelectedRows((prev) =>\r\n        prev.includes(rowIndex) ? [] : [rowIndex]\r\n      );\r\n    }\r\n  };\r\n\r\n  const headers = [\r\n    { key: 'id', label: 'ID' },\r\n    { key: 'name', label: 'Name' },\r\n    { key: 'email', label: 'Email' },\r\n    { key: 'body', label: 'Body' },\r\n  ];\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Comments Table</h1>\r\n      \r\n      <div className=\"add-comment\">\r\n        <h2>Add New Comment</h2>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            value={newComment.name}\r\n            onChange={(e) => setNewComment({...newComment, name: e.target.value})}\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={newComment.email}\r\n            onChange={(e) => setNewComment({...newComment, email: e.target.value})}\r\n          />\r\n          <textarea\r\n            placeholder=\"Body\"\r\n            value={newComment.body}\r\n            onChange={(e) => setNewComment({...newComment, body: e.target.value})}\r\n          />\r\n          <button onClick={handleAddComment}>Add Comment</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"actions\">\r\n        <button \r\n          onClick={handleDeleteComments}\r\n          disabled={selectedRows.length === 0}\r\n        >\r\n          Delete Selected\r\n        </button>\r\n      </div>\r\n\r\n      <DataSet\r\n        headers={headers}\r\n        data={comments}\r\n        onRowEdit={handleUpdateComment}\r\n        onRowSelection={handleRowSelection} // Передаем обработчик выбора строк\r\n      />\r\n\r\n      {error && <div className=\"error\">{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}