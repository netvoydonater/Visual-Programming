{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Visual-Programming\\\\dz6\\\\weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport WeatherCard from \"./WeatherCard\";\nimport CitySelector from \"./CitySelector\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(\"Novosibirsk\");\n  const [coords, setCoords] = useState({\n    lat: 55.0415,\n    lon: 82.9346\n  });\n  const [error, setError] = useState(null);\n  const API_KEY = \"7960fb1ffc8c38bcb43d6995dddff223\";\n\n  // Функция для получения координат города\n  const fetchCoordinates = async cityName => {\n    try {\n      const response = await axios.get(`http://api.openweathermap.org/geo/1.0/direct?q=${cityName}&limit=1&appid=${API_KEY}`);\n      if (response.data.length > 0) {\n        const {\n          lat,\n          lon\n        } = response.data[0];\n        setCoords({\n          lat,\n          lon\n        });\n        setCity(cityName);\n      } else {\n        setError(\"Город не найден\");\n      }\n    } catch (err) {\n      setError(\"Ошибка при получении координат: \" + err.message);\n    }\n  };\n\n  // Функция для получения прогноза погоды\n  const fetchWeather = async () => {\n    try {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${coords.lat}&lon=${coords.lon}&appid=${API_KEY}&units=metric`);\n      setWeatherData(response.data);\n      setError(null);\n    } catch (err) {\n      setError(\"Ошибка при получении погоды: \" + err.message);\n    }\n  };\n\n  // Загрузка погоды при изменении координат\n  useEffect(() => {\n    fetchWeather();\n  }, [coords]);\n\n  // Обновление погоды каждые 3 часа\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchWeather();\n    }, 3 * 60 * 60 * 1000); // 3 часа в миллисекундах\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\n  }, [coords]);\n\n  // Обработка выбора города\n  const handleCityChange = newCity => {\n    fetchCoordinates(newCity);\n  };\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 21\n  }, this);\n  if (!weatherData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 28\n  }, this);\n\n  // Группировка данных по дням\n  const dailyData = {};\n  weatherData.list.forEach(entry => {\n    const date = new Date(entry.dt * 1000).toLocaleDateString(\"en-US\", {\n      weekday: \"long\",\n      day: \"numeric\"\n    });\n    if (!dailyData[date]) {\n      dailyData[date] = [];\n    }\n    dailyData[date].push(entry);\n  });\n\n  // Получение текущей погоды (первый элемент)\n  const currentWeather = weatherData.list[0];\n  const isDay = new Date().getHours() >= 6 && new Date().getHours() < 18;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDay ? \"day\" : \"night\"}`,\n    children: [/*#__PURE__*/_jsxDEV(CitySelector, {\n      onCityChange: handleCityChange,\n      currentCity: city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [city, \", \", new Date().toLocaleDateString(\"en-US\", {\n          weekday: \"long\",\n          day: \"numeric\"\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@2x.png`,\n          alt: \"weather icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [Math.round(currentWeather.main.temp), \"\\xB0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hourly-forecast\",\n        children: weatherData.list.slice(0, 5).map((hour, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hourly-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: new Date(hour.dt * 1000).toLocaleTimeString(\"en-US\", {\n              hour: \"2-digit\",\n              minute: \"2-digit\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(hour.main.temp), \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://openweathermap.org/img/wn/${hour.weather[0].icon}.png`,\n            alt: \"hourly weather\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Humidity: \", currentWeather.main.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Wind: \", currentWeather.wind.speed, \" m/s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Air Pressure: \", currentWeather.main.pressure, \" mm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"UV: \", currentWeather.main.uv || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daily-forecast\",\n      children: Object.keys(dailyData).slice(1, 6).map((date, index) => /*#__PURE__*/_jsxDEV(WeatherCard, {\n        date: date,\n        data: dailyData[date]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4AuLIWaHDP4MQvHfWH7aJIulD3Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","WeatherCard","CitySelector","jsxDEV","_jsxDEV","App","_s","weatherData","setWeatherData","city","setCity","coords","setCoords","lat","lon","error","setError","API_KEY","fetchCoordinates","cityName","response","get","data","length","err","message","fetchWeather","interval","setInterval","clearInterval","handleCityChange","newCity","children","fileName","_jsxFileName","lineNumber","columnNumber","dailyData","list","forEach","entry","date","Date","dt","toLocaleDateString","weekday","day","push","currentWeather","isDay","getHours","className","onCityChange","currentCity","src","weather","icon","alt","Math","round","main","temp","slice","map","hour","index","toLocaleTimeString","minute","humidity","wind","speed","pressure","uv","Object","keys","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Visual-Programming/dz6/weather-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport WeatherCard from \"./WeatherCard\";\r\nimport CitySelector from \"./CitySelector\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [city, setCity] = useState(\"Novosibirsk\"); \r\n  const [coords, setCoords] = useState({ lat: 55.0415, lon: 82.9346 }); \r\n  const [error, setError] = useState(null);\r\n  const API_KEY = \"7960fb1ffc8c38bcb43d6995dddff223\"; \r\n\r\n  // Функция для получения координат города\r\n  const fetchCoordinates = async (cityName) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://api.openweathermap.org/geo/1.0/direct?q=${cityName}&limit=1&appid=${API_KEY}`\r\n      );\r\n      if (response.data.length > 0) {\r\n        const { lat, lon } = response.data[0];\r\n        setCoords({ lat, lon });\r\n        setCity(cityName);\r\n      } else {\r\n        setError(\"Город не найден\");\r\n      }\r\n    } catch (err) {\r\n      setError(\"Ошибка при получении координат: \" + err.message);\r\n    }\r\n  };\r\n\r\n  // Функция для получения прогноза погоды\r\n  const fetchWeather = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${coords.lat}&lon=${coords.lon}&appid=${API_KEY}&units=metric`\r\n      );\r\n      setWeatherData(response.data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(\"Ошибка при получении погоды: \" + err.message);\r\n    }\r\n  };\r\n\r\n  // Загрузка погоды при изменении координат\r\n  useEffect(() => {\r\n    fetchWeather();\r\n  }, [coords]);\r\n\r\n  // Обновление погоды каждые 3 часа\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      fetchWeather();\r\n    }, 3 * 60 * 60 * 1000); // 3 часа в миллисекундах\r\n    return () => clearInterval(interval); // Очистка интервала при размонтировании\r\n  }, [coords]);\r\n\r\n  // Обработка выбора города\r\n  const handleCityChange = (newCity) => {\r\n    fetchCoordinates(newCity);\r\n  };\r\n\r\n  if (error) return <div>{error}</div>;\r\n  if (!weatherData) return <div>Загрузка...</div>;\r\n\r\n  // Группировка данных по дням\r\n  const dailyData = {};\r\n  weatherData.list.forEach((entry) => {\r\n    const date = new Date(entry.dt * 1000).toLocaleDateString(\"en-US\", {\r\n      weekday: \"long\",\r\n      day: \"numeric\",\r\n    });\r\n    if (!dailyData[date]) {\r\n      dailyData[date] = [];\r\n    }\r\n    dailyData[date].push(entry);\r\n  });\r\n\r\n  // Получение текущей погоды (первый элемент)\r\n  const currentWeather = weatherData.list[0];\r\n  const isDay = new Date().getHours() >= 6 && new Date().getHours() < 18;\r\n\r\n  return (\r\n    <div className={`app ${isDay ? \"day\" : \"night\"}`}>\r\n      <CitySelector onCityChange={handleCityChange} currentCity={city} />\r\n      <div className=\"current-weather\">\r\n        <h1>\r\n          {city}, {new Date().toLocaleDateString(\"en-US\", { weekday: \"long\", day: \"numeric\" })}\r\n        </h1>\r\n        <div className=\"weather-icon\">\r\n          <img\r\n            src={`http://openweathermap.org/img/wn/${currentWeather.weather[0].icon}@2x.png`}\r\n            alt=\"weather icon\"\r\n          />\r\n        </div>\r\n        <h2>{Math.round(currentWeather.main.temp)}°</h2>\r\n        <div className=\"hourly-forecast\">\r\n          {weatherData.list.slice(0, 5).map((hour, index) => (\r\n            <div key={index} className=\"hourly-item\">\r\n              <p>{new Date(hour.dt * 1000).toLocaleTimeString(\"en-US\", { hour: \"2-digit\", minute: \"2-digit\" })}</p>\r\n              <p>{Math.round(hour.main.temp)}°</p>\r\n              <img\r\n                src={`http://openweathermap.org/img/wn/${hour.weather[0].icon}.png`}\r\n                alt=\"hourly weather\"\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"weather-details\">\r\n          <p>Humidity: {currentWeather.main.humidity}%</p>\r\n          <p>Wind: {currentWeather.wind.speed} m/s</p>\r\n          <p>Air Pressure: {currentWeather.main.pressure} mm</p>\r\n          <p>UV: {currentWeather.main.uv || 0}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"daily-forecast\">\r\n        {Object.keys(dailyData).slice(1, 6).map((date, index) => (\r\n          <WeatherCard key={index} date={date} data={dailyData[date]} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}